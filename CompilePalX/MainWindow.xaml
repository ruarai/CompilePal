<controls:MetroWindow x:Class="CompilePalX.MainWindow"
            xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
            xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
            xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
            xmlns:dialogs="clr-namespace:MahApps.Metro.Controls.Dialogs;assembly=MahApps.Metro"
            xmlns:local="clr-namespace:CompilePalX"
            xmlns:config="clr-namespace:CompilePalX.Configuration"
            xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"

            Title="Compile Pal X"
            MinHeight="550" MinWidth="790"
            Height="550" Width="790"
            Closing="MetroWindow_Closing"
            IconEdgeMode="Aliased" Icon="CompilePalIcon.ico" ShowIconOnTitleBar="False" 
            Activated="MetroWindow_Activated" 
            BorderThickness="1" 
            BorderBrush="{DynamicResource MahApps.Brushes.Accent}" 
        >

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands>
            <Button Click="ConfigBack_OnClick" ToolTip="Open Game Selector" x:Name="ConfigSelectButton">
                <iconPacks:Material Kind="Menu" />
            </Button>
        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>

    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <Button Click="BugReportButton_OnClick" ToolTip="Report a bug" x:Name="BugReportButton">
                <iconPacks:Material Kind="Bug" />
            </Button>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>

    <controls:MetroWindow.WindowButtonCommands>
        <controls:WindowButtonCommands LightCloseButtonStyle="{StaticResource LightButtonStyle}" LightMinButtonStyle="{StaticResource LightButtonStyle}" LightMaxButtonStyle="{StaticResource LightButtonStyle}"/>
    </controls:MetroWindow.WindowButtonCommands>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="80" MinHeight="80" MaxHeight="240"></RowDefinition>
            <RowDefinition Height="5"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>
        <ListBox x:Name="MapListBox" Grid.Row="0" Margin="10,10,95,0" BorderBrush="{DynamicResource MahApps.Brushes.Accent}" SelectionChanged="MapListBox_OnSelectionChanged" BorderThickness="1" SelectionMode="Single">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <DockPanel HorizontalAlignment="Stretch">
                        <TextBlock Text="{Binding File}" Margin="0, 0, 5, 0"/>
                        <CheckBox IsChecked="{Binding Compile, Mode=TwoWay}" HorizontalAlignment="Right" />
                    </DockPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <Button x:Name="AddMapButton"  Grid.Row="0" Content="Add Map..." Margin="0,10,10,0" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" Click="AddMapButton_Click"/>
        <Button x:Name="RemoveMapButton"  Grid.Row="0" Content="Remove" Margin="0,45,10,0" VerticalAlignment="Top" HorizontalAlignment="Right" Width="75" Click="RemoveMapButton_Click"/>
        <GridSplitter Grid.Row="1" Height="2" HorizontalAlignment="Stretch" Width="512"></GridSplitter>
        <controls:MetroTabControl Grid.Row="2" controls:TabControlHelper.Underlined="SelectedTabItem" controls:TabControlHelper.Transition="LeftReplace" Margin="10,10,10,40">
            <controls:MetroTabItem Header="CONFIG">
                <Grid Background="#FFE5E5E5">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="100"/>
                        <ColumnDefinition Width="Auto" MinWidth="100"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <DockPanel Grid.Column="0" Margin="10,10,0,10" Background="White">
                        <Button x:Name="RemovePresetButton" Content="Remove" Margin="5,0,5,5" VerticalAlignment="Bottom" Click="RemovePresetButton_Click" DockPanel.Dock="Bottom"/>
                        <Button x:Name="ClonePresetButton" Content="Clone..." Margin="5,0,5,5" VerticalAlignment="Bottom" Click="ClonePresetButton_OnClick" DockPanel.Dock="Bottom"/>
                        <Button x:Name="AddPresetButton" Content="Add..." Margin="5,0,5,5" VerticalAlignment="Bottom"  Click="AddPresetButton_Click" DockPanel.Dock="Bottom"/>
                        <ListBox Name="PresetConfigListBox" Margin="0,0,0,5" SelectionChanged="PresetConfigListBox_SelectionChanged" />
                    </DockPanel>
                    <DockPanel Grid.Column="1" Margin="10,10,0,10" Background="White">
                        <Button x:Name="RemoveProcessesButton" Content="Remove" DockPanel.Dock="Bottom" Margin="5,0,5,5" Grid.Row="1" Click="RemoveProcessButton_Click"/>
                        <Button x:Name="AddProcessesButton" Content="Add..." DockPanel.Dock="Bottom" Margin="5,0,5,5" Grid.Row="2" Click="AddProcessButton_Click"/>
                        <ListBox x:Name ="CompileProcessesListBox" Margin="0,0,0,5" Grid.Row="0" SelectionChanged="CompileProcessesListBox_SelectionChanged">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <DockPanel HorizontalAlignment="Stretch">
                                        <TextBlock Text="{Binding}" Margin="0, 0, 5, 0"/>
                                        <CheckBox IsChecked="{Binding DoRun, Mode=TwoWay}" HorizontalAlignment="Right" Click="DoRun_OnClick"/>
                                    </DockPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </DockPanel>
                    <Grid Grid.Column="2">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition Height="36px"/>
                        </Grid.RowDefinitions>
                        <DataGrid Grid.Row ="0" Name="ConfigDataGrid" Margin="10,10,10,10" AutoGenerateColumns="False" CanUserAddRows="False" ItemsSource="{Binding}">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header="Name" Binding="{ Binding Name}" IsReadOnly="True"/>
                                <DataGridTemplateColumn Header="Value">
                                    <DataGridTemplateColumn.CellTemplate>
                                        <DataTemplate>
                                            <Grid>
                                                <TextBox Text="{Binding Value, UpdateSourceTrigger=PropertyChanged}" KeyUp="OnConfigChanged">
                                                    <TextBox.Style>
                                                        <Style TargetType="{x:Type TextBox}">
                                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding ValueIsFile}" Value="True">
                                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValueIsFolder}" Value="True">
                                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </TextBox.Style>
                                                </TextBox>
                                                <local:FileInput Config="{Binding}" FileDialogTitle="Choose File" IsFolder="{Binding ValueIsFolder}">
                                                    <local:FileInput.Style>
                                                        <Style TargetType="{x:Type local:FileInput}">
                                                            <Style.Triggers>
                                                                <DataTrigger Binding="{Binding ValueIsFile}" Value="False">
                                                                    <Setter Property="Visibility" Value="Hidden"/>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding ValueIsFolder}" Value="True">
                                                                    <Setter Property="Hint" Value="Choose Folder"/>
                                                                </DataTrigger>
                                                            </Style.Triggers>

                                                        </Style>
                                                    </local:FileInput.Style>
                                                </local:FileInput>
                                                <Grid.Style>
                                                    <Style TargetType="{x:Type Grid}">
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding CanHaveValue}" Value="False">
                                                                <Setter Property="Visibility" Value="Hidden"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Grid.Style>
                                            </Grid>
                                        </DataTemplate>
                                    </DataGridTemplateColumn.CellTemplate>
                                </DataGridTemplateColumn>
                                <DataGridTextColumn Header="Description" Binding="{ Binding Description}" IsReadOnly="True"/>
                                <DataGridTextColumn Header="Warnings" Binding="{ Binding Warning}" IsReadOnly="True"/>
                            </DataGrid.Columns>
                        </DataGrid>

                        <controls:MetroTabControl Grid.Row="0" Visibility="Hidden" controls:TabControlHelper.Underlined="SelectedTabItem" Name="ProcessTab" IsEnabled="False" SelectionChanged="ProcessTab_OnSelectionChanged" Background="Transparent">
                            <controls:MetroTabItem Header="PROGRAMS" Margin="5, 0, 0, 0" x:Name="ProgramTab" Background="Transparent">
                                <DataGrid IsEnabled="False" Visibility="Visible" Name="ProcessDataGrid" Margin="10,10,10,10" AutoGenerateColumns="False" CanUserAddRows="False" ItemsSource="{Binding}">
                                    <DataGrid.Columns>
                                        <DataGridTemplateColumn Header="Program Path" CanUserSort="False">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <local:FileInput Config="{Binding}" FileDialogTitle="Choose Program"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>

                                        <DataGridTemplateColumn Header="Command Line Arguments" CanUserSort="False" Width="*">
                                            <DataGridTemplateColumn.CellTemplate>
                                                <DataTemplate>
                                                    <TextBox Text="{Binding Value2, UpdateSourceTrigger=PropertyChanged}" KeyUp="OnConfigChanged"/>
                                                </DataTemplate>
                                            </DataGridTemplateColumn.CellTemplate>
                                        </DataGridTemplateColumn>

                                        <DataGridCheckBoxColumn Header="Read Output" Binding="{Binding ReadOutput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ElementStyle="{DynamicResource MetroDataGridCheckBox}" EditingElementStyle="{DynamicResource MetroDataGridCheckBox}" CanUserSort="False"/>

                                        <DataGridCheckBoxColumn Header="Wait For Exit" Binding="{Binding WaitForExit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ElementStyle="{DynamicResource MetroDataGridCheckBox}" EditingElementStyle="{DynamicResource MetroDataGridCheckBox}" CanUserSort="False"/>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </controls:MetroTabItem>

                            <controls:MetroTabItem Header="ORDER" Margin="5, 0, 0, 0" IsEnabledChanged="OrderGrid_OnIsEnabledChanged" x:Name="OrderTab" Background="Transparent">
                                <DataGrid Name="OrderGrid" Margin="10,10,10,10" AutoGenerateColumns="False" CanUserAddRows="False" SelectionMode="Single" ItemsSource="{Binding Source={x:Static config:OrderManager.CurrentOrder}}" local:RowDragHelper.EnableRowDrag="True">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Original Order" Binding="{ Binding Ordering}" IsReadOnly="True" CanUserSort="False"/>
                                        <DataGridTextColumn Header="Name" Binding="{ Binding Name}" IsReadOnly="True" Width="*" CanUserSort="False"/>
                                        <DataGridTextColumn Header="Description" Binding="{ Binding Description}" IsReadOnly="True" Width="*" CanUserSort="False"/>
                                    </DataGrid.Columns>
                                    <DataGrid.CellStyle>
                                        <Style TargetType="DataGridCell">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsDraggable}" Value="False">
                                                    <Setter Property="Background" Value="#FFE5E5E5"/>
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                                                    <Setter Property="Foreground" Value="Black"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsDraggable}" Value="True">
                                                    <Setter Property="BorderThickness" Value="0"/>
                                                    <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </DataGrid.CellStyle>
                                    <DataGrid.RowStyle>
                                        <Style TargetType="DataGridRow">
                                            <Style.Setters>
                                                <EventSetter Event="MouseEnter" Handler="DataGridCell_OnEnter"/>
                                                <EventSetter Event="MouseLeave" Handler="DataGridCell_OnExit"/>
                                            </Style.Setters>
                                        </Style>
                                    </DataGrid.RowStyle>
                                    <DataGrid.Resources>
                                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{x:Static SystemColors.HighlightColor}"/>
                                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{x:Static SystemColors.HighlightTextColor}"/>
                                    </DataGrid.Resources>
                                </DataGrid>
                            </controls:MetroTabItem>
                        </controls:MetroTabControl>

                        <Grid Grid.Row="1">
                            <TextBox Name="ParametersTextBox" Margin="10,0,180,0" VerticalAlignment="Top" IsEnabled="False"/>
                            <Button Content="Add..." Margin="10,0" Grid.Row="1" Width="80" HorizontalAlignment="Right" VerticalAlignment="Top" Name="AddParameterButton" Click="AddParameterButton_Click"/>
                            <Button Content="Remove" Margin="0,0,95,0" Grid.Row="1" Width="80" HorizontalAlignment="Right" VerticalAlignment="Top" Name="RemoveParameterButton" Click="RemoveParameterButton_OnClickParameterButton_Click"/>
                        </Grid>
                    </Grid>
                </Grid>
            </controls:MetroTabItem>
            <controls:MetroTabItem Name="OutputTab" Header="OUTPUT">
                <Grid Background="#FFE5E5E5">
                    <RichTextBox IsReadOnly="True" x:Name="CompileOutputTextbox" AcceptsReturn="True" VerticalScrollBarVisibility="Auto" BorderThickness="0" Margin="10,10,10,10" FontFamily="Segoe UI, Lucida Sans Unicode, Verdana" IsReadOnlyCaretVisible="True" Block.LineHeight="2" IsDocumentEnabled="True">
                        <RichTextBox.Document>
                            <FlowDocument>
                                <Paragraph Name="OutputParagraph"></Paragraph>
                            </FlowDocument>
                        </RichTextBox.Document>
                    </RichTextBox>
                    <!--Scroll to bottom button, probably not needed-->
                    <!--<Button Click="ConfigBack_OnClick" ToolTip="Scroll To Bottom" x:Name="Tmp" HorizontalAlignment="Right" VerticalAlignment="Bottom" Background="Red" Margin="100, 100, 30, 15" Foreground="White" >
                        <iconPacks:Material Kind="ArrowDown" />
                    </Button>-->
                </Grid>

            </controls:MetroTabItem>
        </controls:MetroTabControl>
        <Button Name="CompileStartStopButton" Grid.Row="2" Content="Compile" Margin="10,10,10,10"  VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="75" Click="CompileStartStopButton_OnClick"/>
        <ProgressBar Name="CompileProgressBar" Margin="0,0,96,10" Grid.Row="2" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="200"/>
        <Label Name="UpdateLabel" Visibility="Collapsed"  Grid.Row="2" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="10" MouseLeftButtonUp="UpdateLabel_MouseLeftButtonUp" >
            <Hyperlink Name="UpdateHyperLink" NavigateUri="https://github.com/ruarai/CompilePal/releases/latest" RequestNavigate="UpdateHyperLink_OnRequestNavigate" Foreground="#0057ee"/>
        </Label>
        <Label Name="TimeElapsedLabel" Visibility="Collapsed" Grid.Row="2" VerticalAlignment="Bottom" FontWeight="Bold" HorizontalAlignment="Left" Margin="10" />
    </Grid>

    <Window.TaskbarItemInfo>
        <TaskbarItemInfo/>
    </Window.TaskbarItemInfo>
</controls:MetroWindow>
        

        
